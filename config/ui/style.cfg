
///////////////////////////////////////////////////////////////////////////////
//  Text Brightness & Default Paddings                                       //
///////////////////////////////////////////////////////////////////////////////

textcolor 0 0x40FF80 // green: player talk
textcolor 1 0x60A0FF // blue: "echo" command
textcolor 2 0xFFC040 // yellow: gameplay messages
textcolor 3 0xFF4040 // red: important errors
textcolor 4 0x808080 // gray
textcolor 5 0xC040C0 // magenta
textcolor 6 0xFF8000 // orange
textcolor 7 0xFFFFFF // white
textcolor 8 0x00FFFF // cyan
textcolor 9 0xFFC0CB // pink

// ultra series
uiPad:UXL = 1.2 // DXL * 10
uiPad:UL  = 1.0 // DL  * 10
uiPad:UM  = 0.8 // DM  * 10
uiPad:US  = 0.6 // DS  * 10
uiPad:USS = 0.5 // DSS * 10
uiPad:UXS = 0.3 // DXS * 10

uiPad:UXL- = -1.2 // DXL- * 10
uiPad:UL-  = -1.0 // DL-  * 10
uiPad:UM-  = -0.8 // DM-  * 10
uiPad:US-  = -0.6 // DS-  * 10
uiPad:USS- = -0.5 // DSS- * 10
uiPad:UXS- = -0.3 // DXS- * 10

// duper XL series
uiPad:DSXL = 0.48 // SXL * 10
uiPad:D6XL = 0.40 // 6XL * 10
uiPad:D5XL = 0.32 // 5XL * 10
uiPad:D4XL = 0.24 // 4XL * 10
uiPad:D3XL = 0.20 // 3XL * 10
uiPad:D2XL = 0.16 // 2XL * 10

uiPad:DSXL- = -0.48 // SXL- * 10
uiPad:D6XL- = -0.40 // 6XL- * 10
uiPad:D5XL- = -0.32 // 5XL- * 10
uiPad:D4XL- = -0.24 // 4XL- * 10
uiPad:D3XL- = -0.20 // 3XL- * 10
uiPad:D2XL- = -0.16 // 2XL- * 10

// duper series
uiPad:DXL = 0.12 // XL  * 10
uiPad:DL  = 0.10 // L   * 10
uiPad:DM  = 0.08 // M   * 10
uiPad:DS  = 0.06 // S   * 10
uiPad:DSS = 0.05 // ML  * 10
uiPad:DXS = 0.03 // MS  * 10

uiPad:DXL- = -0.12 // XL-  * 10
uiPad:DL-  = -0.10 // L-   * 10
uiPad:DM-  = -0.08 // M-   * 10
uiPad:DS-  = -0.06 // S-   * 10
uiPad:DSS- = -0.05 // ML-  * 10
uiPad:DXS- = -0.03 // MS-  * 10

// XL series
uiPad:SXL = 0.048 // S * 8
uiPad:6XL = 0.040 // L * 4
uiPad:5XL = 0.032 // M * 4
uiPad:4XL = 0.024 // S * 4
uiPad:3XL = 0.020 // L * 2
uiPad:2XL = 0.016 // M * 2
uiPad:XL  = 0.012 // S * 2

uiPad:SXL- = -0.048 // S- * 8
uiPad:6XL- = -0.040 // L- * 4
uiPad:5XL- = -0.032 // M- * 4
uiPad:4XL- = -0.024 // S- * 4
uiPad:3XL- = -0.020 // L- * 2
uiPad:2XL- = -0.016 // M- * 2
uiPad:XL-  = -0.012 // S- * 2

// normal series (original paddings)
uiPad:L = 0.010
uiPad:M = 0.008
uiPad:S = 0.006

uiPad:L- = -0.010
uiPad:M- = -0.008
uiPad:S- = -0.006

// offsets series
uiPad:O5 = 0.005 // L / 2
uiPad:O4 = 0.004 // M / 2
uiPad:O3 = 0.003 // S / 2
uiPad:O2 = 0.002 // L / 5
uiPad:O1 = 0.001 // L / 10

uiPad:O5- = -0.005 // L- / 2
uiPad:O4- = -0.004 // M- / 2
uiPad:O3- = -0.003 // S- / 2
uiPad:O2- = -0.002 // L- / 5
uiPad:O1- = -0.001 // L- / 10




///////////////////////////////////////////////////////////////////////////////
//  Preset Colors                                                            //
///////////////////////////////////////////////////////////////////////////////

    c_menu    = 0x202020   // solid: window background
    c_menu_m  = 0x1C1C1C   // solid: window background (mod: #boxmod)
    c_diag1   = 0x80202020 // alpha: dialog background
    c_diag2   = 0xC0202020 // alpha: dialog background (highlight)

    c_main1   = 0x282828   // solid: main title gradient (top)
    c_main2   = 0x161616   // solid: main title gradient (bottom)

    c_line1   = 0x323232   // solid: basic line
    c_line2   = 0x424242   // solid: basic line (highlight)

    c_boxmod  = 0xDDDDDD   // modulate: box
    c_grdmod  = 0xB8B8B8   // modulate: gradient

    c_cb0     = 0x484848   // solid: checkbox (off)
    c_cb1     = 0x2BF36E   // solid: checkbox (on)

    c_green   = 0x40FF80
    c_blue    = 0x60A0FF
    c_yellow  = 0xFFC040
    c_red     = 0xFF3030
    c_darkred = 0x801010
    c_gray    = 0x808080
    c_gray_l  = 0xB8B8B8
    c_magenta = 0xC040C0
    c_orange  = 0xFF8000
    c_white   = 0xFFFFFF
    c_cyan_t  = 0x50CFE5
    c_pink_l  = 0xFFC0CB
    c_olive   = 0x93DC6E
    c_baige   = 0xF0E8E0




///////////////////////////////////////////////////////////////////////////////
//  Generic Styles                                                           //
///////////////////////////////////////////////////////////////////////////////

style_generic_default = [ style_generic_box ]
style_generic_none = []

// arg1 (d): background color   | d: default bg color      | n: no bg color      | else: bg color of choice
// arg2 (n): modulo color       | d: default mod color     | n: no mod color     | else: mod color of choice
// arg3 (d): background pattern | d: default UI pattern    | n: no UI pattern    | else: UI pattern of choice
// arg4 (d): outline color      | d: default outline color | n: no outline/pulse | else: outline color of choice
// arg5 (d): pulse frequency    | d: 500 ms  | p: -500 ms* | n: no pulse         | else: pulse frequency of choice
// arg6 (d): pulse color        | d: default pulse color   | n: no pulse         | else: pulse color of choice
// * negative pulse duration values can be used as a custom trigger to enable pulsing
//   through external factors, without relying on the standard hover/hold state logic
style_generic_box = [
    cases (? (< $numargs 1) "d" $arg1) "d" [ uicolor $c_menu              ] "n" [] () [ uicolor $arg1 ]
    cases (? (< $numargs 2) "n" $arg2) "d" [ uimodcolor $c_boxmod         ] "n" [] () [ uimodcolor $arg2 ]
    cases (? (< $numargs 3) "d" $arg3) "d" [ uiFastImgTiled "" "ui/" "ui_bg2" ] "n" [] () [ uiFastImgTiled "" "ui/" "ui_bg" $arg3 ]
    cases (? (< $numargs 4) "d" $arg4) "d" [ arg4 = $c_line1              ] "n" [ arg4 = 0 ]
    if $arg4 [
        cases (? (< $numargs 5) "d" $arg5) "d" [ arg5 =  500      ] "n" [ arg5 = 0 ] "p" [ arg5 = -500 ]
        cases (? (< $numargs 6) "d" $arg6) "d" [ arg6 = $c_line2  ] "n" [ arg6 = 0 ]
        if (|| [&& $arg6 [< $arg5 0]] [&& $uihover? [! $uihold?] [! $uieschold?]]) [
            uioutline (uiCosWave:INT $arg4 $arg6 $arg5)
        ] [ uioutline $arg4 ]
    ]
]

style_generic_gradient1 = [ uimodvgradient $c_grdmod 0xFFFFFF ]
style_generic_gradient2 = [ uimodvgradient 0xFFFFFF $c_grdmod ]
style_generic_gradient3 = [ uimodhgradient $c_grdmod 0xFFFFFF ]
style_generic_gradient4 = [ uimodhgradient 0xFFFFFF $c_grdmod ]

style_generic_linesh = [
    uivlist $arg2 [
        loop i $arg1 [ uiline $c_cb0 $arg3 0 ]
    ]
]

style_generic_linesv = [
    uihlist $arg2 [
        loop i $arg1 [ uiline $c_cb0 0 $arg3 ]
    ]
]




///////////////////////////////////////////////////////////////////////////////
//  Button Styles                                                            //
///////////////////////////////////////////////////////////////////////////////

style_button_default = [ style_button_hold1 ]
style_button_none = []

// arg1 (d): background color   | d: default bg color      | n: no bg color      | else: bg color of choice
// arg2 (d): modulo color       | d: default mod color     | n: no mod color     | else: mod color of choice
// arg3 (d): background pattern | d: default UI pattern    | n: no UI pattern    | else: UI pattern of choice
// arg4 (d): outline color      | d: default outline color | n: no outline/pulse | else: outline color of choice
// arg5 (d): pulse frequency    | d: 500 ms  | p: -500 ms* | n: no pulse         | else: pulse frequency of choice
// arg6 (d): pulse color        | d: default pulse color   | n: no pulse         | else: pulse color of choice
// * negative pulse duration values can be used as a custom trigger to enable pulsing
//   through external factors, without relying on the standard hover/hold state logic
style_button_addargs = [
    cases (? (< $numargs 1) "d" $arg1) "d" [ uicolor $c_menu              ] "n" [] () [ uicolor $arg1 ]
    cases (? (< $numargs 2) "d" $arg2) "d" [ uimodcolor $c_boxmod         ] "n" [] () [ uimodcolor $arg2 ]
    cases (? (< $numargs 3) "d" $arg3) "d" [ uiFastImgTiled "" "ui/" "ui_bg1" ] "n" [] () [ uiFastImgTiled "" "ui/" "ui_bg" $arg3 ]
    cases (? (< $numargs 4) "d" $arg4) "d" [ arg4 = $c_line1              ] "n" [ arg4 = 0 ]
    if $arg4 [
        cases (? (< $numargs 5) "d" $arg5) "d" [ arg5 =  500      ] "n" [ arg5 = 0 ] "p" [ arg5 = -500 ]
        cases (? (< $numargs 6) "d" $arg6) "d" [ arg6 = $c_line2  ] "n" [ arg6 = 0 ]
        if (|| [&& $arg6 [< $arg5 0]] [&& $uihover? [! $uihold?] [! $uieschold?]]) [
            uioutline (uiCosWave:INT $arg4 $arg6 $arg5)
        ] [ uioutline $arg4 ]
    ]
]

style_button_hold1 = [// H
    do $style_button_addargs
    uihold [ style_generic_gradient1 ] [
        uihover [ style_generic_gradient2 ]
    ]
]

style_button_hold2 = [// H, HOVER
    if (|| $uihover? $uihold?) [
        do $style_button_addargs
        uihold [ style_generic_gradient1 ] [
            style_generic_gradient2
        ]
    ]
]

style_button_hold3 = [// H, ESC
    do $style_button_addargs
    if (|| $uihold? $uieschold?) [
        style_generic_gradient1
    ] [ uihover [ style_generic_gradient2 ] ]
]

style_button_hold4 = [// H, HOVER, ESC
    if (|| $uihover? $uihold? $uieschold) [
        do $style_button_addargs
        if (|| $uihold? $uieschold?) [ style_generic_gradient1 ] [
            style_generic_gradient2
        ]
    ]
]

style_button_hold5 = [// V
    do $style_button_addargs
    uihold [ style_generic_gradient3 ] [
        uihover [ style_generic_gradient4 ]
    ]
]

style_button_hold6 = [// V, HOVER
    if (|| $uihover? $uihold?) [
        do $style_button_addargs
        uihold [ style_generic_gradient3 ] [
            style_generic_gradient4
        ]
    ]
]

style_button_hold7 = [// V, ESC
    do $style_button_addargs
    if (|| $uihold? $uieschold?) [
        style_generic_gradient3
    ] [ uihover [ style_generic_gradient4 ] ]
]

style_button_hold8 = [// V, HOVER, ESC
    if (|| $uihover? $uihold? $uieschold) [
        do $style_button_addargs
        if (|| $uihold? $uieschold?) [ style_generic_gradient3 ] [
            style_generic_gradient4
        ]
    ]
]
