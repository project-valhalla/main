
///////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
//                    UI  LIBRARY  LEGEND                                             //
//                                                                                    //
//  #0  assortment of various shorthand convenience functions                         //
//  #1  Menu, Panel, StdDialog, QuickDialog, TitleBtn:N                               //
//  #2  FastImg/Tiled/Stretched, ShadowedImg, Bar, OutlineSide,                       //
//          Rectangle, Triangle, Circle, Checkbox, Radio, Keybox                      //
//  #3  Set/DelTip, Set/GetMillis, HoverOnce, HoverIO, HoverSound,                    //
//          **scrollsound, SetScrollLock, **tabaction, SetBgBlur, uiSetLanguage       //
//  #4  ToolTipBox, ResetScrollBar, Ver/HorScrollbar,                                 //
//          uiLineTreeList, OptionSld, OptionSldWrp                                   //
//  #5  Box, LinkBox, ButtonArea, Button, FancyText, EmbossText                       //
//  #6  Ver/HorSld, Ver/HorColorSld, Ver/HorSpectrumSld, HorBarSld                    //
//  #7  HUD: HudCell, EntCell, EntColor12B/24B                                        //
//  #8  KB HOOK: uiKeyField, uiIntField, uiTextField, helper: KBclean                 //
//  #9  UNCATEGORIZED/UNASSIGNED                                                      //
//                                                                                    //
//   ui*    hardcoded & shorthand (custom) functions                                  //
//   UI*    custom functions & variables                                              //
//                                                                                    //
//   But why the :var: and .var scheme?                                               //
//                                                                                    //
//       The former you really should not be touching unless you know and understand  //
//         what they're meant to represent and *do* -- you'll likely break things.    //
//                                                                                    //
//       The latter are meant to stay away from typical command tab-completion, and   //
//         can represent placeholders of hardcoded vars too. You still should not     //
//         touch them, but the chances of breaking anything important are lesser.     //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #0  assortment of various shorthand convenience functions                                               //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

uiclamp.x = [ uiclamp  1 1 0 0 ]
uiclamp.y = [ uiclamp  0 0 1 1 ]
uiclamp.e = [ uiclamp  1 1 1 1 ]
uiclamp-x = [ uiclamp- 1 1 0 0 ]
uiclamp-y = [ uiclamp- 0 0 1 1 ]
uiclamp-e = [ uiclamp- 1 1 1 1 ]
uiclamp*x = [ uiclamp* 1 1 0 0 ]
uiclamp*y = [ uiclamp* 0 0 1 1 ]
uiclamp*e = [ uiclamp* 1 1 1 1 ]

uifonttext           = [ uifont $arg1 [ uitext           $arg2 $arg3              ] ]
uifontcolortext      = [ uifont $arg1 [ uicolortext      $arg2 $arg3 $arg4        ] ]
uifontcolorblendtext = [ uifont $arg1 [ uicolorblendtext $arg2 $arg3 $arg4  $arg5 ] ]

changeui = [
    if $arg2 [] [ arg2 = $uiname ]
    hideui $arg2 ; showui $arg1
]

// usage: (#l "STRING" <db-id>)
#l = [
    if (< $numargs 2) [ arg2 = $uiname ]
    nodebug [ arg2 = $[#uiLanguage:@arg2] ]
    arg3 = (indexof $arg2 $arg1)
    if $uiLanguage [
        if (> $arg3 -1) [
            at $arg2 (+ $arg3 1) (- $uiLanguage 1)
        ] [ +s (? $uiDebug "^f3") $arg1 ]
    ] [ result $arg1 ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #1  Menu, Panel, StdDialog, QuickDialog,                                                                //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// uiMenu "NAME" [ children ] [ on-show ] [ on-hide ] [ ui-children ] [ title-children ]
uiMenu = [
    newui $arg1 [
        uipress [
            .UI_KBcaret = -1
            .UI_KBvarcur = ""
        ]
        @arg5
        if $uiInputOOB [
            uieschide 0
            uipress    [ uiCleanKB ]
            uiescpress [ uiCleanKB ]
        ]
        uivlist 0 [
            @@(? $arg6 [
                uicolor 0xEE181818 0 0 [
                    uiFastImgStretched "<fade:0.5>" "shadow2" "" "" [] $uiPad:6XL
                    uiclamp*e ; @@arg6
                ]
            ])
            uicolor 0xEE202020 0.01 0.01 [
                uiFastImgTiled "<intmul:0>" "ui/" "ui_bg0"
                uiFastImgStretched "<fade:0.5>" "shadow3" "" "" [] $uiPad:M
                uispace $uiPad:L $uiPad:L [ @@@@arg2 ] ; uiclamp*e
            ] ; uiclamp*x
        ]
        uioutline 0x80181818
        uiclamp*e
    ] [
        uiSetBgBlur 1
        uiSetMillis @arg1
        uiSetLanguage @arg1
        @arg3
    ] [
        uiSetMillis @arg1
        uiSetBgBlur -1
        if (=s $.UI_KBthisui @arg1) [ uiCleanKB ]
        @arg4
    ]
]

// uiPanel "NAME" [ children ] [ on-show ] [ on-hide ] [ ui-children ]
uiPanel = [
    newui $arg1 [
        uipress [
            .UI_KBcaret = -1
            .UI_KBvarcur = ""
        ]
        @arg5
        @(? $arg2 [
            uicolor 0xEE202020 0.01 0.01 [
                uiFastImgTiled "<intmul:0><fade:2>" "ui/" "ui_bg0"
                uiFastImgStretched "<fade:0.5>" "shadow3" "" "" [] $uiPad:M
                uispace $uiPad:L $uiPad:L [ @@@arg2 ] ; uiclamp*e
            ] ; uioutline 0x80202020
        ])
        uiclamp*e
    ] [
        uiSetMillis @arg1
        uiSetLanguage @arg1
        @arg3
    ] [
        uiSetMillis @arg1
        if (=s $.UI_KBthisui @arg1) [ uiCleanKB ]
        @arg4
    ]
]

// uiStdDialog "NAME" [ children ] [ true ] [ false ] [ on-show ] [ on-hide ]
uiStdDialog = [
    newui $arg1 [
        uipress [
            .UI_KBcaret = -1
            .UI_KBvarcur = ""
        ]
        uispace $uiPad:4XL 0 [
            style_generic_box d n d d n
            uiclamp*e
            uispace $uiPad:4XL $uiPad:L [
                @@@arg2
            ] ; uiclamp-e
        ] ; uiclamp-e
        uispace 0 $uiPad:4XL [
            uialign 0 -1
            uihlist 0 [
                uiButtonArea "" $uiPad:SXL 0 [
                    uiFastImg "" "ui/" "yes" "" (+f $uiPad:6XL (uihold? 0 (uihover? (*f (uiCosWave 200) $uiPad:O4) 0)))
                    uirelease [ @@@@@arg3 ; hideui $uiname ]
                    uiHoverOnce [ uiSetMillis ]
                ]
                uiButtonArea "" $uiPad:SXL 0 [
                    uiFastImg "" "ui/" "no" "" (+f $uiPad:6XL (uihold? 0 (uihover? (*f (uiCosWave 250) $uiPad:O4) 0)))
                    uirelease [ @@@@@arg4 ; hideui $uiname ]
                    uiHoverOnce [ uiSetMillis ]
                ]
            ] ; uiclamp-x
        ] ; uiclamp-x
    ] [
        uiSetBgBlur 1
        uiSetMillis @arg1
        uiSetLanguage @arg1
        @arg5
    ] [
        uiSetMillis @arg1
        uiSetBgBlur -1
        if (=s $.UI_KBthisui @arg1) [ uiCleanKB ]
        @arg6
    ]
]

// uiLiteMenu "NAME" [ ui/bg-children ] [ children ] [ on-show ] [ on-hide ]
uiLiteMenu = [
    newui $arg1 [
        uipress [
            .UI_KBcaret = -1
            .UI_KBvarcur = ""
        ]
        @arg2
        @(? $arg3 [
            uispace $uiPad:L $uiPad:L [
                @@arg3
            ] ; uiclamp-e
        ])
    ] [
        uiSetMillis @arg1
        uiSetLanguage @arg1
        @arg4
    ] [
        uiSetMillis @arg1
        if (=s $.UI_KBthisui @arg1) [ uiCleanKB ]
        @arg5
    ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #2  FastImg/Tiled/Stretched, ShadowedImg, Bar, OutlineSide,                                             //
//      Rectangle, Triangle, Circle, Checkbox, Radio, Keybox                                                //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// uiFastImg TEXCMD PATH1 PATH2 PATH3 X Y [ children ]
uiFastImg = [
    if $arg5 [] [ arg5 = $uiPad:SXL ]
    if $arg6 [] [ arg6 = $arg5 ]
    uiimage (+s $arg1 "data/interface/" $arg2 $arg3 $arg4 ".png") $arg5 $arg6 [ doargs $arg7 ]
]

// uiFastImgTiled TEXCMD PATH1 PATH2 PATH3 [ children ] W H X Y
uiFastImgTiled = [
    if $arg6 [] [ arg6 = $uiPad:SXL ]
    if $arg7 [] [ arg7 = $arg6 ]
    uitiledimage (+s $arg1 "data/interface/" $arg2 $arg3 $arg4 ".png") $arg6 $arg7 $arg8 $arg9 [ doargs $arg5 ]
]

// uiFastImgStretched TEXCMD PATH1 PATH2 PATH3 [ children ] X Y
uiFastImgStretched = [
    if $arg6 [] [ arg6 = $uiPad:O4 ]
    if $arg7 [] [ arg7 = $arg6 ]
    uistretchedimage (+s $arg1 "data/interface/" $arg2 $arg3 $arg4 ".png") $arg6 $arg7 [ doargs $arg5 ]
]

// uiFastImgRotated TEXCMD PATH1 PATH2 PATH3 ANGLE X Y [ children ]
uiFastImgRotated = [
    if $arg5 [] [ arg5 = 0 ]
    if $arg6 [] [ arg6 = $uiPad:SXL ]
    if $arg7 [] [ arg7 = $arg6 ]
    uirotatedimage (+s $arg1 "data/interface/" $arg2 $arg3 $arg4 ".png") $arg5 $arg6 $arg7 [ doargs $arg8 ]
]

// uiShadowedImg TEXCMD PATH1 PATH2 PATH3 X Y OFFSET-MUL
uiShadowedImg = [
    if $arg7 [] [ arg7 = 1 ]
    arg8 = (*f $uiPad:O1  $arg7)
    arg9 = (*f $uiPad:O1- $arg7)
    uigroup [
        uioffset $arg9 $arg8 [ uiFastImg (+s $arg1 <mad:0/0/0>) $arg2 $arg3 $arg4 $arg5 $arg6 ]
        uioffset $arg8 $arg9 [ uiFastImg     $arg1              $arg2 $arg3 $arg4 $arg5 $arg6 ]
    ]
]

// uiBar CLAMP-X CLAMP-Y PAD-X PAD-Y 0xCOLOR
uiBar = [
    if (> $numargs 4) [] [ arg5 = $c_line1 ]
    if (|| $arg3 $arg4) [
        uispace $arg3 $arg4 [
            uiclamp $arg1 $arg1 $arg2 $arg2
            uiline $arg5
            uiclamp- $arg1 $arg1 $arg2 $arg2
        ]
    ] [
        uiline $arg5
        uiclamp- $arg1 $arg1 $arg2 $arg2
    ]
]

// uiOutlineSide SIDE-BIT 0xCOLOR
uiOutlineSide = [
    if (< $numargs 2) [ arg2 = $c_line1 ]
    case $arg1 0xF [
        uioutline $arg2 ; uiclamp-e
    ] 0x0 [] () [
        if (& $arg1 0x1) [ uiline $arg2 ; uiclamp-y ; uialign- -1  0 ]
        if (& $arg1 0x2) [ uiline $arg2 ; uiclamp-y ; uialign-  1  0 ]
        if (& $arg1 0x4) [ uiline $arg2 ; uiclamp-x ; uialign-  0 -1 ]
        if (& $arg1 0x8) [ uiline $arg2 ; uiclamp-x ; uialign-  0  1 ]
    ]
]

// uiRectangle 0xCOLOR_RECTANGLE 0xCOLOR_OUTLINE X Y [ action ]
uiRectangle = [
    if $arg2 [] [ arg2 = $arg1 ]
    if $arg3 [] [ arg3 = $uiPad:O3 ]
    if $arg4 [] [ arg4 = $arg3 ]
    uicolor $arg1 $arg3 $arg4 [
        doargs $arg5
        uioutline $arg2
        uiclamp-e
    ]
]

// uiTriangle 0xCOLOR_TRIANGLE 0xCOLOR_OUTLINE X Y ROTATION
uiTriangle = [
    uigroup [
        if $arg1 [] [ arg1 = $c_baige ]
        if $arg2 [] [ arg2 = $arg1 ]
        if $arg3 [] [ arg3 = $uiPad:O3 ]
        if $arg4 [] [ arg4 = $arg3 ]
        uitriangle $arg1 $arg3 $arg4 $arg5
        uitriangleoutline $arg2 $arg3 $arg4 $arg5
    ]
]

// uiTriangle 0xCOLOR_CIRCLE 0xCOLOR_OUTLINE SIZE
uiCircle = [
    uigroup [
        if $arg1 [] [ arg1 = $c_baige ]
        if $arg2 [] [ arg2 = $arg1 ]
        if $arg3 [] [ arg3 = $uiPad:O3 ]
        uicircle $arg1 $arg3
        uicircleoutline $arg2 $arg3
    ]
]

// uiCheckbox [ condition ] SIZE 0xRRGGBB 0xRRGGBB [ children ]
uiCheckbox = [
    arg1 = (! (! (arg1)))
    if $arg2 [] [ arg2 = $uiPad:2XL ]
    if $arg3 [] [ arg3 = $c_cb1 ]
    if $arg4 [] [ arg4 = $c_cb0 ]
    //arg1 = (? $arg1 $arg3 $arg4)
    uiFastImg "" "ui/" "ui_checkbox" $arg1 $arg2 $arg2 $arg5
]

// uiRadio [ condition ] SIZE 0xRRGGBB 0xRRGGBB [ children ]
uiRadio = [
    arg1 = (! (! (arg1)))
    if $arg2 [] [ arg2 = $uiPad:2XL ]
    if $arg3 [] [ arg3 = $c_cb1 ]
    if $arg4 [] [ arg4 = $c_cb0 ]
    //arg1 = (? $arg1 $arg3 $arg4)
    uiFastImg "" "ui/" "ui_radio" $arg1 $arg2 $arg2 $arg5
]

// uiKeybox X Y [ key-children ] 0xAARRGGBB [ children ]
uiKeybox = [
    if $arg2 [] [ arg2 = $arg1 ]
    if $arg4 [] [ arg4 = 0x505050 ]
    uigroup [
        uicolor $arg4 (-f $arg1 0.004) (-f $arg2 0.003) [ style_generic_gradient2 ; uiclamp-e ]
        uistretchedimage "data/interface/ui/io/frame.png" 0.025 0.025 [ uifill $arg1 $arg2 $arg5 ]
        uioffset 0 -0.003 [ doargs $arg3 ]
    ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #3  Del/SetTip, Set/GetMillis, HoverOnce, HoverIO, HoverSound,                                          //
//      **scrollsound, SetScrollLock, **tabaction, SetBgBlur, uiSetLanguage                                 //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

uiDelTip = [
    set uiTipName ""
    set uiTipLive 0
    set uiTipFade 0
]

// uiSetTip ID "tooltip text"
uiSetTip = [
    arg1 = [uiIipID:@arg1]
    arg2 = (escape $arg2)
    uiHoverIO $arg1 [
        sleep 0 [
            set uiTipName @arg2
            set uiTipLive 0
        ]
        set uiTipMenu $uiname
        set uiTipTime $getmillis
        set uiTipPosX (getpxposx)
        set uiTipPosY (getpxposy)
        settopui "tips"
    ] [ uiDelTip ]
]

// uiSetMillis  var-name
// set a UI's millis footprint to current millis
uiSetMillis = [ [.UImillis_@(? $numargs $arg1 $uiname)] = $getmillis ]
uiGetMillis = [ getalias [.UImillis_@(? $numargs $arg1 $uiname)] ]

// container to trigger an action only once upon hover
// uiHoverOnce [ in-action ]
uiHoverOnce = [
    uitarget 0 0 [
        if (&& $ui!hover? [! $uihold?] [! $uieschold?]) [ doargs $arg1 ]
        uihover [ uitarget ; uiclamp-e ]
    ] ; uiclamp-e
]

// container to trigger an action only once upon hover entry/exit, requires ID var
// uiHoverIO ID [ in-action ] [ out-action ]
uiHoverIO = [
    uitarget 0 0 [
        if (&& $ui!hover? [! $uihold?] [! $uieschold?]) [ $arg1 = 1 ; doargs $arg2 ]
        uihover [ uitarget ; uiclamp-e ] [
            if (getalias $arg1) [ $arg1 = 0 ; doargs $arg3 ]
        ]
    ] ; uiclamp-e
]

// trigger sound upon hovering a UI element
uiHoverSound = [
    arg1 = (+ $arg1 0) // cast to int
    uisound ui/hover@arg1 50
]

// UIscrollsound  var-name  delta  limit
// trigger a scroll sound when given var changes value between set limits
UIscrollsound = [
    if $arg2 [] [ arg2 = 1 ]
    if ((? (> $arg2 0) < >) $$arg1 $arg3) [ arg4 = 1 ]
    if $arg4 [
        $arg1 = ((? (> $arg2 0) min max) (+ $$arg1 $arg2) $arg3)
        uisound "ui/scroll.wav" 255
    ]
]

// when enabled, it prevents scroll blocks from using the wheel
uiSetScrollLock = [
    if $arg1 [
        if (|| uihover? uihold?) [ uiScrollLock 1 ]
    ] [ uiScrollLock 0 ]
]

// uiCosWave  WAVELENGTH
// retrieve Y cosWave value based on current UI's timestamp
uiCosWave = [ cosWave (abs (- $getmillis (uiGetMillis))) $arg1 ]

// uiCosWave:INT  INT1  INT2  WAVELENGTH  X-TIME  Y-FORMAT
// if X = 0 will result in UI timestamp use
uiCosWave:INT = [
    if $arg4 [] [ arg4 = (- $getmillis (uiGetMillis)) ]
    cosWave:INT $arg1 $arg2 $arg3 $arg4 $arg5
]

// uiCosWave:RGB  R1 G1 B1  R2 G2 B2  WAVELENGTH  X-TIME  Y-FORMAT
// if X = 0 will result in UI timestamp use
uiCosWave:RGB = [
    if $arg8 [] [ arg8 = (- $getmillis (uiGetMillis)) ]
    cosWave:RGB $arg1 $arg2 $arg3 $arg4 $arg5 $arg6 $arg7 $arg8 $arg9
]

// uiSinWave  WAVELENGTH
// retrieve Y sinWave value based on current UI's timestamp
uiSinWave = [ sinWave (abs (- $getmillis (uiGetMillis))) $arg1 ]

// uiSinWave:INT  INT1  INT2  WAVELENGTH  X-TIME  Y-FORMAT
// if X = 0 will result in UI timestamp use
uiSinWave:INT = [
    if $arg4 [] [ arg4 = (- $getmillis (uiGetMillis)) ]
    sinWave:INT $arg1 $arg2 $arg3 $arg4 $arg5
]

// uiSinWave:RGB  R1 G1 B1  R2 G2 B2  WAVELENGTH  X-TIME  Y-FORMAT
// if X = 0 will result in UI timestamp use
uiSinWave:RGB = [
    if $arg8 [] [ arg8 = (- $getmillis (uiGetMillis)) ]
    sinWave:RGB $arg1 $arg2 $arg3 $arg4 $arg5 $arg6 $arg7 $arg8 $arg9
]

// UItabaction  STATE_1  STATE_2  [ action_1 ]  [ action_2 ]
UItabaction = [
    if $uiClickTabs [ $arg1 $arg3 ] [
        $arg2 (? (< $numargs 4) $arg3 $arg4)
    ]
]

// uiSetBgBlur  DELTA
// add or remove blur postfx to screen depending on provided delta
uiSetBgBlur = [
    case $arg1 1 [
        if (&& $uiBlurBg [! $uiBlurring]) [
            //addpostfx "sobel"
            loop i 6 [ addpostfx "fsblur" ]
        ]
        uiBlurring (+ $uiBlurring $arg1)
    ] -1 [
        uiBlurring (max 0 (+ $uiBlurring $arg1))
        if (! $uiBlurring) [ removepostfx "fsblur" ]
    ]
]

// uiSetLanguage  ui_name
// init a UI's language db with the right chunk from master db
uiSetLanguage = [
    arg2 = (indexof $#langDB $arg1)
    if (< $arg2 0) [ arg2 = 0 ] // default strings failsafe
    [#uiLanguage:@arg1] = (at $#langDB (+ $arg2 1))
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #4  ToolTipBox, ResetScrollBar, Ver/HorScrollbar, uiLineTreeList, OptionSld, OptionSldWrp               //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// uiScrollBox ID X Y [ children ] BORDER SCROLLSPEED DISABLE-BAR
uiScrollBox = [
    if $arg3 [] [ arg3 = $arg2 ]
    uigroup [
        uiSetScrollLock 0
        uiscroll $arg2 $arg3 [
            uifill $arg2 $arg3 $arg4
        ]
        uiOutlineSide $arg5
        if $arg6 [] [ arg6 = (*f $arg3 2) ]
        if $arg7 [
            uiscrollarrow (*f $arg6 -1)
            uiscrollarrow     $arg6
            uivscrollbar
        ] [ uiVerScrollBar 1 $arg6 $arg1 ]
    ]
]

// uiResetScrollBar :scroll:ID OVERRIDE
uiResetScrollBar = [
    if $arg2 [
        [@arg1.timestamp] = $getmillis
        [@arg1.opacity]   = 1
    ] [
        nodebug [
            arg3 = (* (getpxposx) (getpxposy))
            if (!= $[@arg1.position] $arg3) [
                [@arg1.position]  = $arg3
                [@arg1.timestamp] = $getmillis
                [@arg1.opacity]   = 1
            ]
        ]
    ]
]

// uiVerScrollBar ALIGNMENT SCROLLSPEED ID
uiVerScrollBar = [
    arg3 = [:scroll:@arg3]
    uitarget 0 0 [
        if $uiScrollLock [] [
            uiscrollarrow (*f $arg2 -1)
            uiscrollarrow     $arg2
            uiscrolldown [ uiResetScrollBar $arg3 1 ]
            uiscrollup   [ uiResetScrollBar $arg3 1 ]
            uihover      [ uiResetScrollBar $arg3 0 ]
        ]
        nodebug [
            if $[@arg3.opacity] [
                if (> $getmillis (+ $[@arg3.timestamp] 500)) [
                    [@arg3.opacity] = (maxf 0 (
                        %f (- $[@arg3.timestamp] -600 $getmillis) 100
                    ))
                ]
            ]
            uispace $uiPad:O3 $uiPad:O3 [
                uivscrollbar [
                    uiscrollbutton [
                        uiFastImgStretched (
                            +s (fade $[@arg3.opacity]) <mad:.5/.5/.5>
                        ) "hud/" "row" "" [ uiclamp.e ] $uiPad:O2
                    ]
                ] ; uiclamp-y
            ] ; uiclamp-y ; uialign- $arg1
        ]
    ] ; uiclamp-e
]

// uiHorScrollBar ALIGNMENT SCROLLSPEED ID
uiHorScrollBar = [
    arg3 = [:scroll:@arg3]
    uitarget 0 0 [
        if $uiScrollLock [] [
            uiscrollarrow (*f $arg2 -1)
            uiscrollarrow     $arg2
            uiscrolldown [ uiResetScrollBar $arg3 1 ]
            uiscrollup   [ uiResetScrollBar $arg3 1 ]
            uihover      [ uiResetScrollBar $arg3 0 ]
        ]
        nodebug [
            if $[@arg3.opacity] [
                if (> $getmillis (+ $[@arg3.timestamp] 500)) [
                    [@arg3.opacity] = (maxf 0 (
                        %f (- $[@arg3.timestamp] -600 $getmillis) 100
                    ))
                ]
            ]
            uispace $uiPad:O3 $uiPad:O3 [
                uivscrollbar [
                    uiscrollbutton [
                        uiFastImgStretched (
                            +s (fade $[@arg3.opacity]) <mad:.5/.5/.5>
                        ) "hud/" "row" "" [ uiclamp.e ] $uiPad:O2
                    ]
                ] ; uiclamp-x
            ] ; uiclamp-x ; uialign- 0 $arg1
        ]
    ] ; uiclamp-e
]

// uiLineTreeList [ title children ] [ [items] [items] ] 0xCOLOR RT-OFFSET
uiLineTreeList = [
    if $arg3 [] [ arg3 = $c_gray ]
    if $arg4 [] [ arg4 = $uiPad:5XL ]
    arg5 = [ uifill $arg4 $uiPad:3XL [
        uiBar 0 1 0 0 $arg3 ; uialign- 1
    ] ]
    uivlist 0 [
        local idx len end
        len = (- (listlen $arg2) 1)
        doargs $arg1
        looplist line $arg2 [
            if (! $idx) $arg5
            if (! $line) $arg5 [
                uihlist 0 [
                    uifill $arg4
                    uivlist 0 [
                        end = (= $idx $len)
                        uifill $uiPad:3XL 0 [
                            uiBar 1 0 0 0 $arg3 ; uialign- -1 $end
                            uiBar 0 1 0 0 $arg3 ; uialign- -1
                        ] ; uiclamp-y
                        if $end uifill
                    ] ; uiclamp-y
                    uifill $uiPad:L
                    doargs $line
                ]
            ] ; ++ idx
        ] ; uialign* -1
    ] ; uiclamp-x
]

// uiOptionSld VAR [ Value Name Color . . . ] [ on-change ] (CONDITION) X Y
uiOptionSld = [
    if (< $numargs 4) [ arg4 = 1 ]
    if $arg6 [] [ arg6 = $uiPad:5XL ]
    uifill $arg5 0 [
        local curr.idx len
        curr.idx = -1
        len = (/ (listlen $arg2) 3)
        loop* v 3 $len [
            if (=s (at $arg2 $v) $$arg1) [
                v = (/ $v 3)
                curr.idx = $v
            ]
        ]
        uispace (+f $arg6 $uiPad:O5) 0 [
            uialign 0 1
            uiclamp.e
            uivlist 0 [
                uiclamp.x
                if (> $curr.idx -1) [
                    uifontcolortext "wide" (at $arg2 (+ (* $curr.idx 3) 1)) (
                        if $arg4 [ doargs (at $arg2 (+ (* $curr.idx 3) 2)) ] [ result $c_gray ]
                    ) 0.5
                ] [ uifontcolortext "wide" "CUSTOM" $c_gray_l 0.5 ]
                uihlist 0 [
                    uiclamp.x
                    loop v $len [
                        uispace $uiPad:O5 0 [
                            uiclamp.x
                            uicolor (? (= $curr.idx $v) (? $arg4 $c_cb1 $c_gray_l) $c_cb0) 0 (*f $arg6 0.09375) [
                                uiclamp.x
                                style_generic_gradient2
                                uioutline (? (= $curr.idx $v) (? $arg4 $c_cb1 $c_gray_l) $c_cb0)
                                uiclamp*e
                            ]
                        ]
                    ]
                ]
                uifill 0 (*f $arg6 0.0625) // *magic*
            ]
        ]
        if (>= $curr.idx 1) [
            uiButtonArea "hold2" $arg6 $arg6 [
                uiTriangle (? $uihover? $c_green $c_gray_l) 0 (*f $arg6 0.3) 0 90
                uirelease [ $arg1 = (at $arg2 (* (- $curr.idx 1) 3)) ; arg3 ]
            ]
        ] [ uifill $arg6 $arg6 [ uiTriangle $c_cb0 0 (*f $arg6 0.3) 0 90 ] ]
        uialign- -1
        if (<= $curr.idx (- $len 2)) [
            uiButtonArea "hold2" $arg6 $arg6 [
                uiTriangle (? $uihover? $c_green $c_gray_l) 0 (*f $arg6 0.3) 0 270
                uirelease [ $arg1 = (at $arg2 (* (+ $curr.idx 1) 3)) ; arg3 ]
            ]
        ] [ uifill $arg6 $arg6 [ uiTriangle $c_cb0 0 (*f $arg6 0.3) 0 270 ] ]
        uialign-  1
    ]
]

// uiOptionSldWrp VAR [ Value Name . . . ] [ on-change ] X Y
uiOptionSldWrp = [
    if $arg5 [] [ arg5 = $uiPad:5XL ]
    uifill $arg4 0 [
        local curr.idx len
        curr.idx = -1
        len = (/ (listlen $arg2) 2)
        loop* v 2 $len [
            if (= (at $arg2 $v) $$arg1) [
                v = (/ $v 2)
                curr.idx = $v
            ]
        ]
        uispace (+f $arg5 $uiPad:L) 0 [
            uialign 0 1
            uiclamp.e
            uivlist 0 [
                uiclamp.x
                if (> $curr.idx -1) [
                    uifonttext "wide" (at $arg2 (+ (* $curr.idx 2) 1)) 0.5
                ] [ uifontcolortext "wide" "UNKNOWN" $c_gray_l 0.5 ]
                uihlist 0 [
                    uiclamp.x
                    loop v $len [
                        uicolor (? (= $curr.idx $v) $c_cb1 $c_cb0) 0 (*f $arg5 0.09375) [
                            uiclamp.x
                            style_generic_gradient2
                            uioutline (? (= $curr.idx $v) $c_cb1 $c_cb0)
                            uiclamp*e
                        ]
                    ]
                ]
                uifill 0 (*f $arg5 0.0625) // *magic*
            ]
        ]
        uiButtonArea "hold2" $arg5 $arg5 [
            uiTriangle (? $uihover? $c_green $c_gray_l) 0 (*f $arg5 0.3) 0 90
            uirelease [
                case $curr.idx -1 [ curr.idx = 0 ] 0 [ curr.idx = (- $len 1) ] () [ curr.idx = (- $curr.idx 1) ]
                $arg1 = (at $arg2 (* $curr.idx 2)) ; arg3
            ]
        ] ; uialign- -1
        uiButtonArea "hold2" $arg5 $arg5 [
            uiTriangle (? $uihover? $c_green $c_gray_l) 0 (*f $arg5 0.3) 0 270
            uirelease [
                case $curr.idx -1 [ curr.idx = (- $len 1) ] (- $len 1) [ curr.idx = 0 ] () [ curr.idx = (+ $curr.idx 1) ]
                $arg1 = (at $arg2 (* $curr.idx 2)) ; arg3
            ]
        ] ; uialign-  1
    ]
]


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #5  Box, LinkBox, ButtonArea, Button, FancyText, EmbossText                                             //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// uiBox [ style(s) ] X Y [ children ]
uiBox = [
    if $arg3 [] [ arg3 = $arg2 ]
    uitarget $arg2 $arg3 [
        if (=s $arg1 "") [
            style_generic_default
        ] [ doargs [style_generic_@arg1] ]
        uiclamp*e
        doargs $arg4
    ]
]

// uiLinkBox 0xCOLOR:UNDERLINE [ children ]
uiLinkBox = [
    uitarget 0 0 [
        uiHoverOnce [ uiHoverSound ]
        doargs $arg2
        uihover [
            uispace $uiPad:O2 0 [
                uiRectangle $arg1 0 0 $uiPad:O1
                uiclamp-x
            ] ; uiclamp-x ; uialign- 0 1
        ]
    ]
]

// uiButtonArea [ style(s) ] X Y [ children ]
uiButtonArea = [
    if $arg3 [] [ arg3 = $arg2 ]
    uitarget $arg2 $arg3 [
        uiHoverOnce [ uiHoverSound ]
        if (=s $arg1 "") [
            style_button_default
        ] [ doargs [style_button_@arg1] ]
        uiclamp*e
        doargs $arg4
    ]
]

// uiButton [ style(s) ] [ button-children ] X Y [ on-release ] ROTATION [ children ] (USE-PADDING)
uiButton = [
    if (< $numargs 8) [ arg8 = $uiPad:L ]
    if $arg3 [] [ arg3 = $uiPad:5XL ]
    if $arg4 [] [ arg4 = $uiPad:5XL ]
    uitarget $arg3 $arg4 [
        uiHoverOnce [ uiHoverSound ]
        doargs $arg7
        if (=s $arg1 "") [
            style_button_default
        ] [ doargs [style_button_@arg1] ]
        uiclamp*e
        uirelease [ doargs $arg5 ]
        uispace $arg8 0 [
            uihlist $uiPad:L [
                doargs $arg2
            ] ; uialign- $arg6
        ] ; uiclamp-x
    ]
]

// uiFancyText  FONT  TEXT  SIZE  0xCOLOR  TRANSPARENCY
uiFancyText = [
    if (=s $arg1 "") [ arg1 = "default" ]
    if $arg4 [] [ arg4 = $c_white ]
    if (< $numargs 5) [ arg5 = 1 ]
    uifont $arg1 [
        uifontoutline 1 0x20 [
            uishadow 255 [
                uicolortext $arg2 (|A (*fA $arg5) $arg4) $arg3
            ]
        ]
    ]
]

// uiEmbossText  FONT  TEXT  SIZE  0xCOLOR
uiEmbossText = [
    if (=s $arg1 "") [ arg1 = "default" ]
    uigroup [
        uioffset $uiPad:O2- $uiPad:O2 [
            uifontcolortext $arg1 (stripcolors $arg2) 0 $arg3
        ]
        uioffset $uiPad:O2 $uiPad:O2- [
            uifontcolortext $arg1 (stripcolors $arg2) (INT:TRANS $arg4 * 2) $arg3
        ]
        uifontcolortext $arg1 $arg2 (? (< $arg4 0) $c_white $arg4) $arg3
    ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #6  Ver/HorSld, Ver/HorColorSld, Ver/HorSpectrumSld, HorBarSld                                          //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// uiVerSld VAR MIN MAX STEP [ on-change ] [ label formatting ] X Y [ pulse trigger cond ]
uiVerSld = [
    if $arg7 [] [ arg7 = $uiPad:5XL ]
    if $arg8 [] [ arg8 = $uiPad:5XL ]
    if $arg6 [ arg6 = (do $arg6) ] [ arg6 = $$arg1 ]
    if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
    uitarget $arg7 $arg8 [
        uiHoverOnce [ uiHoverSound 2 ]
        uiSetScrollLock 1
        uispace $uiPad:O4 0 [
            style_generic_box $c_main1 n d d (? $arg9 p d)
            uiclamp*e
        ]
        uivslider $arg1 $arg2 $arg3 $arg4 [ doargs $arg5 ] [
            uisliderbutton [
                if (<=f $arg2 $$arg1 $arg3) [
                    uifill 0 $uiPad:3XL
                    uiline $c_baige
                    uiclamp*x
                ]
            ] ; uiclamp-x
            uifontoutline 1 0xFF [
                uivlist $uiPad:M- [
                    loop i (strlen $arg6) [
                        uifontcolortext "default" (substr $arg6 $i 1) (|A! (? $arg9 0xA0 0x60)) 0.65
                    ]
                ]
            ]
        ]
        uiclamp*e
    ]
]

// uiHorSld VAR MIN MAX STEP [ on-change ] [ label formatting ] X Y [ pulse trigger cond ]
uiHorSld = [
    if $arg7 [] [ arg7 = $uiPad:5XL ]
    if $arg8 [] [ arg8 = $uiPad:5XL ]
    if $arg6 [ arg6 = (do $arg6) ] [ arg6 = $$arg1 ]
    if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
    uitarget $arg7 $arg8 [
        uiHoverOnce [ uiHoverSound 2 ]
        uiSetScrollLock 1
        uispace 0 $uiPad:O4 [
            style_generic_box $c_main1 n d d (? $arg9 p d)
            uiclamp*e
        ]
        uihslider $arg1 $arg2 $arg3 $arg4 [ doargs $arg5 ] [
            uisliderbutton [
                if (<=f $arg2 $$arg1 $arg3) [
                    uifill $uiPad:3XL
                    uiline $c_baige
                    uiclamp*y
                ]
            ] ; uiclamp-y
            uifontoutline 1 0xFF [
                uifontcolortext "default" $arg6 (|A! (? $arg9 0xA0 0x60)) 0.65
            ]
        ]
        uiclamp*e
    ]
]

// uiVerColorSld VAR MIN MAX 0xCOLOR1 0xCOLOR2 [ on-change ] X Y [ pulse trigger cond ]
uiVerColorSld = [
    if $arg7 [] [ arg7 = $uiPad:5XL ]
    if $arg8 [] [ arg8 = $uiPad:5XL ]
    if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
    uitarget $arg7 $arg8 [
        uiHoverOnce [ uiHoverSound 2 ]
        uiSetScrollLock 1
        uispace $uiPad:O4 0 [
            uivgradient $arg4 $arg5
            uiFastImgStretched "" "shadow3"
            uioutline $c_diag1
            uiclamp*e
        ]
        uivslider $arg1 $arg2 $arg3 1 [ doargs $arg6 ] [
            uisliderbutton [
                if (<=f $arg2 $$arg1 $arg3) [
                    uifill 0 $uiPad:3XL
                    uiline $c_baige
                    uiclamp*x
                ]
            ] ; uiclamp-x
            uifontoutline 1 0xFF [
                uivlist $uiPad:M- [
                    loop i (strlen $$arg1) [
                        uifontcolortext "wide" (substr $$arg1 $i 1) (|A! (? $arg9 0xA0 0x60)) 0.7
                    ]
                ]
            ]
        ]
        uiclamp*e
    ]
]

// uiHorColorSld VAR MIN MAX 0xCOLOR1 0xCOLOR2 [ on-change ] X Y [ pulse trigger cond ]
uiHorColorSld = [
    if $arg7 [] [ arg7 = $uiPad:5XL ]
    if $arg8 [] [ arg8 = $uiPad:5XL ]
    if $arg9 [ arg9 = (do $arg9) ] [ arg9 = (|| uihover+? uihold+?) ]
    uitarget $arg7 $arg8 [
        uiHoverOnce [ uiHoverSound 2 ]
        uiSetScrollLock 1
        uispace 0 $uiPad:O4 [
            uihgradient $arg4 $arg5
            uiFastImgStretched "" "shadow3"
            uioutline $c_diag1
            uiclamp*e
        ]
        uihslider $arg1 $arg2 $arg3 1 [ doargs $arg6 ] [
            uisliderbutton [
                if (<=f $arg2 $$arg1 $arg3) [
                    uifill $uiPad:3XL
                    uiline $c_baige
                    uiclamp*y
                ]
            ] ; uiclamp-y
            uifontoutline 1 0xFF [
                uifontcolortext "wide" $$arg1 (|A! (? $arg9 0xA0 0x60)) 0.7
            ]
        ]
        uiclamp*e
    ]
]

// convenience block that allows an INT-based color slider group
// uiHorColorSldBlock VAR [ action-R ] [ action-G ] [ action-B ]
uiHorColorSldBlock = [
    if $arg2 [] [ arg2 = [ RGB>INT $r $g $b [ $arg1 = (| $r $g $b) ] ] ]
    if $arg3 [] [ arg3 = $arg2 ]
    if $arg4 [] [ arg4 = $arg3 ]
    uivlist 0 [
        INT>RGB $$arg1 [
            uiHorColorSld r 0 255 (& $$arg1 0x00FFFF) (| $$arg1 0xFF0000) $arg2
            uiHorColorSld g 0 255 (& $$arg1 0xFF00FF) (| $$arg1 0x00FF00) $arg3
            uiHorColorSld b 0 255 (& $$arg1 0xFFFF00) (| $$arg1 0x0000FF) $arg4
        ] ; uiclamp*e
    ] ; uiclamp-x
]

// uiVerSpectrumSld VAR MIN MAX [ on-change ] X Y [ pulse trigger cond ]
uiVerSpectrumSld = [
    if $arg5 [] [ arg5 = $uiPad:5XL ]
    if $arg6 [] [ arg6 = $uiPad:5XL ]
    if $arg7 [ arg7 = (do $arg7) ] [ arg7 = (|| uihover+? uihold+?) ]
    uitarget $arg5 $arg6 [
        uiHoverOnce [ uiHoverSound 2 ]
        uiSetScrollLock 1
        uispace $uiPad:O4 0 [
            uivlist 0 [
                looplist2 c1 c2 [
                    0xFF0000 0xFFFF00
                    0xFFFF00 0x00FF00
                    0x00FF00 0x00FFFF
                    0x00FFFF 0x0000FF
                    0x0000FF 0xFF00FF
                    0xFF00FF 0xFF0000
                ] [ uivgradient $c1 $c2 ]
                uiclamp*e
            ]
            style_generic_box n n n d (? $arg7 p d)
            uiclamp*e
        ]
        uivslider $arg1 $arg2 $arg3 1 [ doargs $arg4 ] [
            uisliderbutton [
                if (<=f $arg2 $$arg1 $arg3) [
                    uifill 0 $uiPad:3XL
                    uiline $c_baige
                    uiclamp*x
                ]
            ] ; uiclamp-x
        ]
        uiclamp*e
    ]
]

// uiHorSpectrumSld VAR MIN MAX [ on-change ] X Y [ pulse trigger cond ]
uiHorSpectrumSld = [
    if $arg5 [] [ arg5 = $uiPad:5XL ]
    if $arg6 [] [ arg6 = $uiPad:5XL ]
    if $arg7 [ arg7 = (do $arg7) ] [ arg7 = (|| uihover+? uihold+?) ]
    uitarget $arg5 $arg6 [
        uiHoverOnce [ uiHoverSound 2 ]
        uiSetScrollLock 1
        uispace 0 $uiPad:O4 [
            uihlist 0 [
                looplist2 c1 c2 [
                    0xFF0000 0xFFFF00
                    0xFFFF00 0x00FF00
                    0x00FF00 0x00FFFF
                    0x00FFFF 0x0000FF
                    0x0000FF 0xFF00FF
                    0xFF00FF 0xFF0000
                ] [ uihgradient $c1 $c2 ]
                uiclamp*e
            ]
            style_generic_box n n n d (? $arg7 p d)
            uiclamp*e
        ]
        uihslider $arg1 $arg2 $arg3 1 [ doargs $arg4 ] [
            uisliderbutton [
                if (<=f $arg2 $$arg1 $arg3) [
                    uifill $uiPad:3XL
                    uiline $c_baige
                    uiclamp*y
                ]
            ] ; uiclamp-y
        ]
        uiclamp*e
    ]
]

// uiHorBarSld VAR MIN MAX STEP [ on-change ] X Y [ pulse trigger cond ]
uiHorBarSld = [
    if (> $arg2 $arg3) [ // swap MIN/MAX around if they're the wrong way around.
        arg9 = $arg2
        arg2 = (+ $arg3 0) // ensure MIN is int
        arg3 = (+ $arg9 0) // ensure MAX is int
    ]
    arg4 = (abs $arg4) // ensure STEP is positive int
    if $arg7 [] [ arg7 = $uiPad:5XL ]
    if $arg8 [ arg8 = (do $arg8) ] [ arg8 = (|| uihover+? uihold+?) ]

    local bar.max bar.idx bar.act
    bar.max = (+ (abs (/ (- $arg2 $arg3) $arg4)) 1)
    bar.max = (/f (-f $arg6 $uiPad:XL (*f (- $bar.max 1) $uiPad:O3)) $bar.max)
    bar.idx = (/ (- $$arg1 $arg2) $arg4)

    uigroup [
        uiHoverOnce [ uiHoverSound 2 ]
        uiSetScrollLock 1
        uihslider $arg1 $arg2 $arg3 $arg4 $arg5 [
            uifill (*f 0.97 (-f $arg6 $bar.max)) $arg7
            uisliderbutton [
                if (<= $arg2 $$arg1 $arg3) [ uifill ]
                uiclamp-y
            ] ; uiclamp-y
        ]
        arg7 = (*f 0.75 $arg7)
        uifill $arg6 $arg7 [
            style_generic_box d d d d (? $arg8 p d)
            uiclamp*e
            uispace $uiPad:S 0 [
                uihlist $uiPad:O3 [
                    loop n (max (+ $bar.idx 1) 0) [
                        uistretchedimage (
                            +s "data/interface/ui/ui_bar" (= $n $bar.idx) ".png"
                        ) $uiPad:O5 $uiPad:O5 [ uifill $bar.max (-f $arg7 $uiPad:XL) ]
                    ]
                ]
            ] ; uialign- -1
        ]
    ]
]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #7  HUD: HudCell, EntCell, EntColor12B/24B                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// uiHudCell X Y [ children ] X-spacing Y-spacing
uiHudCell = [
    if (< $numargs 4) [ arg4 = $uiPad:L ]
    if (< $numargs 5) [ arg5 = $uiPad:L ]
    uitarget $arg1 $arg2 [
        style_generic_box $c_diag1 d bg0 d n
        uispace $arg4 $arg5 [ doargs $arg3 ]
        uiclamp*e
    ]
]

// uiEntCell KEY[S] [ children ] TITLE Y-spacing
uiEntCell = [
    local x y
    x = (listlen $arg1)
    x = (+f (*f $x $uiPad:D4XL) (*f (- $x 1) $uiPad:L))
    y = (+f (*f $uiPad:5XL 4) $uiPad:3XL)
    if (< $numargs 4) [ arg4 = $uiPad:L ]
    arg5 = (|| [||iskeyheld @arg1] $uihover+?)
    uitarget $x $y [
        style_generic_box (? $arg5 $c_diag2 $c_diag1) d bg0 d (? $arg5 p n)
        uispace $uiPad:L $uiPad:L [
            if (=s $arg3 "") [
                uivlist 0 [
                    uiclamp.e
                    doargs $arg2
                    uiclamp*e
                ]
            ] [
                uivlist $arg4 [
                    uialign 0 -1
                    uiclamp.x
                    uihlist 0 [
                        uitarget (-f $x $uiPad:5XL $uiPad:3XL) (-f $uiPad:5XL $uiPad:S) [
                            style_generic_box $c_diag1 n n d n
                            uiclamp*e
                            uitext $arg3 0.55
                        ]
                        uiKeybox $uiPad:5XL $uiPad:5XL [ uitext $arg1 0.5 ] (? $arg5 $c_cb1)
                    ]
                    doargs $arg2
                    uiclamp*x
                ]
            ]
        ]
        uiclamp*e
    ]
]

uiEntColor12B = [
    local c1 c2 c3 color12 color24
    color12 = (& (entattr $arg1) 0xFFF)
    c1 =    (>> $color12 0x8)
    c2 = (& (>> $color12 0x4) 0xF)
    c3 = (&     $color12      0xF)
    color24 = (| (<< $c1 0x14) (<< $c2 0xC) (<< $c3 0x4) 0x0F0F0F)
    uiHorColorSld c1 0 15 (& $color24 0x00FFFF) (| $color24 0xFF0000) [ entattr $arg1 (| (<< $c1 0x8) (& $color12 0x0FF)) ]
    uiHorColorSld c2 0 15 (& $color24 0xFF00FF) (| $color24 0x00FF00) [ entattr $arg1 (| (<< $c2 0x4) (& $color12 0xF0F)) ]
    uiHorColorSld c3 0 15 (& $color24 0xFFFF00) (| $color24 0x0000FF) [ entattr $arg1 (|     $c3      (& $color12 0xFF0)) ]
]

uiEntColor24B = [
    local color24 ; color24 = (RGB>INT $ea1 $ea2 $ea3)
    uiHorColorSldBlock color24 [ entattr 1 $r ] [ entattr 2 $g ] [ entattr 3 $b ]
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #8  KB HOOK: uiKeyField, uiIntField, uiTextField, helper func KBclean                                   //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// .uiKeyField ACTION TYPE WIDTH SCALE
// TYPE: "" / "edit" / "spec"
.uiKeyField = [
    local action type width scale id isfocused text
    action = $arg1
    type = $arg2
    width = $arg3
    scale = $arg4
    id = (escape (+s "#" $type "bind" " " $action))
    isfocused = (=s $.UI_KBvarcur $id)

    uitarget $width 0 [
        uioutline (? $isfocused $c_red $c_line1)
        uipress [
            local newvarcur
            resetcursorblink
            newvarcur = (escape (+s "#" $type "bind" " " $action))
            if (=s $newvarcur $.UI_KBvarcur) [
                (+s $type "bind") MOUSELEFT $action
            ]
            .UI_KBvarcur = $newvarcur
        ]

        text = (
            strreplace (
                prettylist (
                    (+s "search" $type "binds") $action
                )
            ) "," "^fs^f2,^fr"
        )
        uiwraptext (? (> (strlen $text) 0) $text " ") $width $scale (? $isfocused 0 -1)
        uiclamp*e

        if (&& $isfocused [!=s "" $uikeycode]) [
            if (=s "ESCAPE" $uikeycode) [
                    .UI_KBvarcur = ""
            ] [
                if (!=s "MOUSELEFT" $uikeycode) [
                    resetcursorblink
                    (+s $type "bind") $uikeycode $action
                ] [
                    .UI_KBvarcur = ""
                ]
            ]
        ]
    ]
]

// uiKeyField ACTION TYPE WIDTH SCALE DEFAULT
// TYPE: "" / "edit" / "spec"
uiKeyField = [
    local action type width scale defaultkeys
    action = $arg1
    type = $arg2
    width = $arg3
    scale = $arg4
    defaultkeys = $arg5
    uihlist 0 [
        .uiKeyField $action $type $width $scale
        uiButton "hold2" [
            uitext "clear" (*f $scale 0.75)
        ] 0 0 [
            looplist key ((+s "search" $type "binds") $action) [
                (+s $type "bind") $key ""
            ]
        ]
        uiButton "hold2" [
            uitext "reset" (*f $scale 0.75)
        ] 0 0 [
            looplist key ((+s "search" $type "binds") $action) [
                (+s $type "bind") $key ""
            ]
            looplist key $defaultkeys [
                (+s $type "bind") $key $action
            ]
        ]
    ]
]

// .numfilter STR
.numfilter = [
    local str ret char
    str = $arg1
    ret = ""
    loop i (strlen $str) [
        char = (substr $str $i 1)
        if (|| [=s "0" $char] [> (+ 0 $char) 0]) [
            ret = (+s $ret $char)
        ]
    ]
    result $ret
]

// .delzeroes STR
.delzeroes = [
    local str ret char found
    str = $arg1
    ret = ""
    found = 0
    loop i (strlen $str) [
        char = (substr $str $i 1)
        if (!= 0 $char) [
            found = 1
        ]
        if $found [
            ret = (+s $ret $char)
        ]
    ]
    result $ret
]

// .uiIntField VAR MIN MAX STEP WIDTH SCALE [ on-change ]
.uiIntField = [
    local var min_ max_ width scale onchange isfocused caret
    var = $arg1
    min_ = $arg2
    max_ = $arg3
    step = $arg4
    width = $arg5
    scale = $arg6
    onchange = $arg7
    isfocused = (=s $.UI_KBvarcur $arg1)
    caret = (? $isfocused $.UI_KBcaret -1)
    uisettextinput (? (>= $.UI_KBcaret 0) 1 0)

    uitarget $width 0 [
        uioutline (? $isfocused $c_red $c_line1)
        uipress [
            resetcursorblink
            if (< $uicursorindex 0) [
                .UI_KBcaret = 0
            ] [
                .UI_KBcaret = $uicursorindex
            ]
            .UI_KBvarcur = $var
        ]

        uiclamp*e
        uitext (+s $$var " ") $scale $caret
        uialign- 1

        if (&& $isfocused [|| [!=s "" $uikeycode] [!=s "" $uitextinput]]) [ // user pressed a key while this field was focused
            if (>= (indexof "ESCAPE RETURN KP_ENTER" $uikeycode) 0) [
                .UI_KBvarcur = ""
                .UI_KBcaret = -1
                uisettextinput 0
            ] [
                resetcursorblink
                cases $uikeycode "DELETE" [
                    $.UI_KBvarcur = (clamp (.delzeroes (strsplice $$.UI_KBvarcur "" $.UI_KBcaret 1)) $min_ $max_)
                    do $onchange
                ] "BACKSPACE" [
                    $.UI_KBvarcur = (clamp (.delzeroes (strsplice $$.UI_KBvarcur "" (- $.UI_KBcaret 1) 1)) $min_ $max_)
                    if (> $.UI_KBcaret 0) [
                        -- .UI_KBcaret
                    ]
                    do $onchange
                ] "LEFT" [
                    if (> $.UI_KBcaret 0) [
                        -- .UI_KBcaret
                    ]
                ] "RIGHT" [
                    if (&& [>= $.UI_KBcaret 0] [< $.UI_KBcaret (strlen $$.UI_KBvarcur)]) [
                        ++ .UI_KBcaret
                    ]
                ] "UP" [
                    $.UI_KBvarcur = (min $max_ (+ $$.UI_KBvarcur $step))
                    .UI_KBcaret = 0
                    do $onchange
                ] "DOWN" [
                    $.UI_KBvarcur = (max $min_ (- $$.UI_KBvarcur $step))
                    .UI_KBcaret = 0
                    do $onchange
                ] "PLUS" [
                    $.UI_KBvarcur = (min $max_ (abs $$.UI_KBvarcur))
                    .UI_KBcaret = 0
                    do $onchange
                ] "KP_PLUS" [
                    $.UI_KBvarcur = (min $max_ (abs $$.UI_KBvarcur))
                    .UI_KBcaret = 0
                    do $onchange
                ] "MINUS" [
                    $.UI_KBvarcur = (max $min_ (* -1 (abs $$.UI_KBvarcur)))
                    .UI_KBcaret = 0
                    do $onchange
                ] "KP_MINUS" [
                    $.UI_KBvarcur = (max $min_ (* -1 (abs $$.UI_KBvarcur)))
                    .UI_KBcaret = 0
                    do $onchange
                ] () [
                    if (|| [!=s $uitextinput "0"] [> $.UI_KBcaret 0]) [ // don't add zeroes at the start or the value will be parsed in base 8
                        local numinput inputlen
                        numinput = (.numfilter $uitextinput)
                        inputlen = (strlen $numinput)
                        if (= $$.UI_KBvarcur 0) [
                            if (!=s $numinput "") [
                                $.UI_KBvarcur = $numinput
                                .UI_KBcaret = $inputlen
                            ] [
                                $.UI_KBvarcur = 0
                                .UI_KBcaret = 0
                            ]
                        ] [
                            $.UI_KBvarcur = (clamp (strsplice $$.UI_KBvarcur $numinput $.UI_KBcaret 0) $min_ $max_)
                            .UI_KBcaret = (min (+ $.UI_KBcaret $inputlen) (strlen $$.UI_KBvarcur))
                        ]
                        do $onchange
                    ]
                ]
            ]
        ]
    ]
]

// uiIntField VAR MIN MAX STEP WIDTH SCALE [ on-change ]
uiIntField = [
    local var min_ max_ step width scale onchange
    var = $arg1
    min_ = $arg2
    max_ = $arg3
    step = $arg4
    width = $arg5
    scale = $arg6
    onchange = $arg7

    uihlist 0 [
        uiButton "hold2" [
            uitext "-" $scale
        ] 0 0 [
            .UI_KBvarcur = $var
            $.UI_KBvarcur = (clamp (- $$.UI_KBvarcur $step) $min_ $max_)
            .UI_KBcaret = 0
        ]; uiclamp-x
        .uiIntField $var $min_ $max_ $step $width $scale $onchange
        uiButton "hold2" [
            uitext "+" $scale
        ] 0 0 [
            .UI_KBvarcur = $var
            $.UI_KBvarcur = (clamp (+ $$.UI_KBvarcur $step) $min_ $max_)
            .UI_KBcaret = 0
        ]; uiclamp-x
    ]
]

// uiTextField VAR MAXSTRLEN ALIGN WIDTH SCALE [ on-change ] [ placeholder ]
uiTextField = [
    local var maxstrlen align width scale onchange placeholder isfocused caret
    var = $arg1
    maxstrlen = $arg2
    align = $arg3
    width = $arg4
    scale = $arg5
    onchange = $arg6
    isfocused = (=s $.UI_KBvarcur $arg1)
    caret = (? $isfocused $.UI_KBcaret -1)
    placeholder = (? (&& (!=s "" $arg7) (< $caret 0)) $arg7 " ")
    uisettextinput (? (>= $.UI_KBcaret 0) 1 0)

    uitarget $width 0 [
        uioutline (? $isfocused $c_red $c_line1)
        uipress [
            resetcursorblink
            if (< $uicursorindex 0) [
                .UI_KBcaret = (? (> $align 0) 0 (char2byteindex $$var (strlen $$var)))
            ] [
                .UI_KBcaret = (? (> (strlen $$var) 0) $uicursorindex 0)
            ]
            .UI_KBvarcur = $arg1
        ]

        uiclamp*e
        uispace $uiPad:XL 0 [
            uitext (? (> (strlen $$var) 0) $$var $placeholder) $scale $caret
        ]
        uialign- $align

        if (&& $isfocused [|| [!=s "" $uikeycode] [!=s "" $uitextinput]]) [ // user pressed a key while this field was focused
            if (>= (indexof "ESCAPE RETURN KP_ENTER" $uikeycode) 0) [
                .UI_KBvarcur = ""
                .UI_KBcaret = -1
                uisettextinput 0
            ] [
                resetcursorblink
                cases $uikeycode "DELETE" [
                    $.UI_KBvarcur = (strsplice $$.UI_KBvarcur "" (byte2charindex $$.UI_KBvarcur $.UI_KBcaret) 1)
                    do $onchange
                ] "BACKSPACE" [
                    if (> $.UI_KBcaret 0) [
                        local ix_c
                        ix_c = (byte2charindex $$.UI_KBvarcur $.UI_KBcaret)
                        $.UI_KBvarcur = (strsplice $$.UI_KBvarcur "" (- $ix_c 1) 1)
                        .UI_KBcaret = (char2byteindex $$.UI_KBvarcur (- $ix_c 1))
                    ]
                    do $onchange
                ] "LEFT" [
                    // move cursor to the left by 1 character (not byte!)
                    if (> $.UI_KBcaret 0) [
                        local ix_c
                        ix_c = (byte2charindex $$.UI_KBvarcur $.UI_KBcaret)
                        .UI_KBcaret = (char2byteindex $$.UI_KBvarcur (- $ix_c 1))
                    ]
                ] "RIGHT" [
                    // move cursor to the right by 1 character (not byte!)
                    if (&& [>= $.UI_KBcaret 0] [< (byte2charindex $$.UI_KBvarcur $.UI_KBcaret) (strlen $$.UI_KBvarcur)]) [
                        local ix_c
                        ix_c = (byte2charindex $$.UI_KBvarcur $.UI_KBcaret)
                        .UI_KBcaret = (char2byteindex $$.UI_KBvarcur (+ $ix_c 1))
                    ]
                ] () [
                    local inputlen pastestr pastebytelen
                    if (&& [=s "V" $uikeycode] [|| [iskeyheld "LCTRL"] [iskeyheld "RCTRL"]]) [ // CTRL-V
                        inputlen = (clamp (strlen $getclipboard) 0 (- $maxstrlen (strlen $$.UI_KBvarcur)))
                        pastestr = (substr $getclipboard 0 $inputlen)
                        pastebytelen = (strbytelen $pastestr)
                        $.UI_KBvarcur = (strsplice $$.UI_KBvarcur $pastestr (byte2charindex $$.UI_KBvarcur $.UI_KBcaret) 0)
                        .UI_KBcaret = (+ $.UI_KBcaret $pastebytelen)
                        do $onchange
                    ] [
                        if (&& [!=s "" $uitextinput] [< (strlen $$.UI_KBvarcur) $maxstrlen]) [
                            inputlen = (strlen $uitextinput)
                            $.UI_KBvarcur = (substr (strsplice $$.UI_KBvarcur $uitextinput (byte2charindex $$.UI_KBvarcur $.UI_KBcaret) 0) 0 $maxstrlen)
                            .UI_KBcaret = (char2byteindex $$.UI_KBvarcur (min $maxstrlen (+ (byte2charindex $$.UI_KBvarcur $.UI_KBcaret) $inputlen)))

                            do $onchange

                        ]
                    ]
                ]
            ]
        ]
    ]
]

uiCleanKB = [
    cases $.UI_KBdict "int" [
        clamp=  $.UI_KBvarcur $.UI_KBvarmin $.UI_KBvarmax
    ] "float" [
        clampf= $.UI_KBvarcur $.UI_KBvarmin $.UI_KBvarmax
    ] () []
    do (getalias .UI_KBvarend)
    .UI_KBdict   = ""
    .UI_KBvarcur = ""
    .UI_KBvarmod = ""
    .UI_KBvarend = ""
    .UI_KBthisui = ""
    .UI_KBvarlen =  1
    .UI_KBvarmin =  0
    .UI_KBvarmax =  0
    .UI_KBvardot =  0
    .UI_KBcaret  = -1
    uiInputOOB 0
]




//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  #9  UNCATEGORIZED/UNASSIGNED                                                                            //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// 1: hand color, 2: UI size multiplier, 3: hand angle
// 4: hand offset, 5: hand thickness, 6: hand base size
// 7: near-triangle length, 8: far-triangle length
UIclockhand = [
    loop+ n 4 5 [ [arg@n] = (*f $arg2 $[arg@n]) ]
    uioffset (*f (sin $arg3) $arg4) (*f (cos (+ $arg3 180)) $arg4) [
        uiTriangle $arg1 0 $arg5 $arg7 (*f    $arg3      -1)
        uiTriangle $arg1 0 $arg5 $arg8 (*f (+ $arg3 180) -1)
    ]
    uiCircle $arg1 0 $arg6
]

// UIclock SIZE MINUTES* HOURS** TIME***
// *   : Boolean adjustment for the dot minute display surrounding the face.
//           0: 1 dot per minute. 1: 1 dot per hour.
// **  : Bitwise adjustment for numerals display. Controls type and amount.
//           0: all hours. 1: only cardinal hours.
//           2: all Roman numerals. 3: only cardinal Roman numerals.
// *** : Custom time. Seconds is smallest integer. Floats are milliseconds.
UIclock = [
    if $arg4 [] [ arg4 = (/f $getmillis 1000) ]
    uigroup [
        // ring 5-min points
        loop* n (? $arg2 30 6) (? $arg2 12 60) [
            uioffset (*f (sin $n) $arg1 0.975) (*f (cos $n) $arg1 0.975) [
                if (mod $n 30) [ uiCircle $c_line1 0 (*f $arg1 0.02) ] [
                    uiCircle 0 0 (*f $arg1 0.025)
                ]
            ]
        ]
        // ring numerals
        loop+ n 1 (? (& $arg3 1) 4 12) [
            arg2 = (- (* $n (? (& $arg3 1) -90 -30)) 180) // angle multiplier
            uioffset (*f (sin $arg2) $arg1 0.8) (*f (cos $arg2) $arg1 0.8) [
                arg2 = (*f $arg1 3.1) // text size multiplier
                case $arg3 0 [ uitext $n $arg2 ] 1 [ uitext (* $n 3) $arg2 ] 2 [
                    uitext (at [I II III IV V VI VII VIII IX X XI XII] (- $n 1)) $arg2
                ] 3 [ uitext (at [III VI IX XII] (- $n 1)) $arg2 ]
            ]
        ]
        // clock hands
        arg1 = (*f $arg1 0.5)
        UIclockhand $c_orange $arg1 (*f (divf $arg4 3600) 30)  0.65  0.050  0.13  0.58  0.63
        UIclockhand $c_blue   $arg1 (*f (divf $arg4   60)  6)  0.80  0.025  0.09  0.80  0.85
        UIclockhand $c_green  $arg1 (*f (modf $arg4   60)  6)  0.75  0.010  0.05  1.10  1.10
    ]
]
